import java.nio.file.Paths


description = 'Java port of pymorphy2'

dependencies {
    compile 'commons-io:commons-io:2.4'
    compile 'org.noggit:noggit:0.7'
    compile 'com.google.guava:guava:18.0'

    compile project(':dawg')
    testCompile 'junit:junit:4.11'
}

task benchmark(type: Test) {
    include '**/*Benchmark*'
    outputs.upToDateWhen { false }
    testLogging {
        showStandardStreams = true
    }
}

task testJar(type: Jar, dependsOn: testClasses) {
    classifier = 'tests'
    from sourceSets.test.output
}

configurations {
    tests
}

artifacts {
    tests testJar
}

task fetchPymorphy2Dicts() << {
    downloadAndUnpackDicts('pymorphy2-dicts-ru', '2.4.393658.3725883', 'bdd5d23660f2ad5e8ec2721743a8b419')
    downloadAndUnpackDicts('pymorphy2-dicts-uk', '2.4.1.1.1460299261', 'f193a4ac7a8e6124e6fd8846f06ccca0')
}

processTestResources.dependsOn fetchPymorphy2Dicts


def downloadAndUnpackDicts(packageName, version, md5) {
    String fullName = "${packageName}-${version}"
    String filename = "${fullName}.tar.gz"
    String url = "https://pypi.python.org/packages/source/p/${packageName}/${filename}?md5=${md5}"
    def baseDictsPath = Paths.get(
        sourceSets.test.resources.getSrcDirs().iterator()[0].toString(),
        "company", "evo", "jmorphy2"
    )
    def dirName = packageName.replaceAll('-', "_")
    def dictsDir = baseDictsPath.resolve(dirName).toFile()
    if (dictsDir.exists()) {
        return
    }
    def dictsFile = baseDictsPath.resolve(filename).toFile()
    if (dictsFile.exists()) {
        dictsFile.delete()
    }

    println "Downloading ${packageName} dicts..."
    new URL(url).withInputStream{ i -> dictsFile.withOutputStream{ it << i }}

    println "Unpacking ${packageName} dicts..."
    dictsDir.mkdirs()
    copy {
        from tarTree(resources.gzip(dictsFile))
        into dictsDir
        includeEmptyDirs = false
        eachFile { FileCopyDetails fcp ->
            String zip_root_path = "${fullName}/${dirName}/data/"
            Integer strip_segments = zip_root_path.length() - zip_root_path.replace('/', '').length()
            if (fcp.relativePath.pathString.startsWith(zip_root_path)) {
                fcp.relativePath = new RelativePath(
                    !fcp.file.isDirectory(),
                    fcp.relativePath.segments[strip_segments..-1] as String[]
                )
            } else {
              fcp.exclude()
            }
        }
    }
    dictsFile.delete()
}
